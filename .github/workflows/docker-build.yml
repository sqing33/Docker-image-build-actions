# .github/workflows/docker-build.yml

name: 构建多架构Docker镜像

on:
  # 允许您在 Actions 标签页手动触发此工作流
  workflow_dispatch:
    inputs:
      repo_url:
        description: '要克隆的GitHub仓库链接 (例如: https://github.com/your-name/your-repo.git)'
        required: true
      repo_ref:
        description: '要检出的分支、标签或提交SHA (例如: main)'
        required: true
        default: 'main'
      image_name:
        description: '要设置的镜像名称 (例如: my-awesome-app)'
        required: true
        default: 'my-app'
      platforms:
        description: '要构建的平台, 逗号分隔 (留空则默认全部)'
        required: false
        default: 'linux/amd64,linux/arm64,linux/arm/v7'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: 1. 克隆指定的代码仓库
        run: |
          git clone ${{ github.event.inputs.repo_url }} app
          cd app
          git checkout ${{ github.event.inputs.repo_ref }}
      
      - name: 2. 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 3. 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 4. 登录到 GitHub Container Registry (ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 5. 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 6. 提取 Docker 元数据并生成标签
        id: meta
        uses: docker/metadata-action@v5
        with:
          # 列出所有要推送的镜像仓库和名称
          images: |
            ghcr.io/${{ github.actor }}/${{ github.event.inputs.image_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.image_name }}

      - name: 7. 构建并推送到多个镜像仓库
        uses: docker/build-push-action@v6
        with:
          # 构建上下文指向我们克隆的 `app` 目录
          context: ./app
          # 使用用户输入的平台信息
          platforms: ${{ github.event.inputs.platforms }}
          # 总是进行推送，因为这是手动触发的
          push: true
          # 使用元数据步骤生成的标签
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
